#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : bash_prompt_funcs
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-08 19:57:22
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-08 19:57:22  | Adam Compton | Initial creation.
# =============================================================================

# Guard to prevent multiple sourcing
if [[ -z "${BASH_PROMPT_FUNCS_LOADED:-}" ]]; then
    declare -g BASH_PROMPT_FUNCS_LOADED=true

    # Function to determine the operating system
    function get_os_type() {
        uname_output=$(uname -s)

        case "${uname_output}" in
        Linux*)
            echo "Linux"
            ;;
        Darwin*)
            echo "macOS"
            ;;
        CYGWIN* | MINGW32* | MSYS* | MINGW*)
            echo "Windows"
            ;;
        *)
            echo "Unknown"
            ;;
        esac
    }

    function check_venv() {
        if [[ -n "${VIRTUAL_ENV}" ]]; then
            echo "${white}[${light_blue}Python VENV = ${light_blue}${VIRTUAL_ENV}${white}]"
            echo -e "${white}┣━"
        fi
    }

    function check_kerb_ccache() {
        if [[ -n "${KRB5CCNAME}" ]]; then
            echo "${white}[${light_red}KRB5CCNAME = ${light_red}${KRB5CCNAME}${white}]"
            echo -e "${white}┣━"
        fi
    }

    # Function to check session
    function check_session() {
        SESSION_STATUS="${white}┏━"

        # Check if we are in either a TMUX or SCREEN session
        if [[ -n "${TMUX:-}" ]] || [[ -n "${STY:-}" ]]; then
            # Check if we are in a tmux session
            if [[ -n "${TMUX:-}" ]]; then
                TMUX_SESSION=$(tmux display-message -p '#S')
                SESSION_STATUS+="[${yellow}TMUX = ${TMUX_SESSION}${white}]"
            fi

            # Check if we are in a screen session
            if [[ -n "${STY:-}" ]]; then
                SCREEN_SESSION=$(echo "${STY:-}" | awk -F '.' '{print $2}')
                SESSION_STATUS+="[${yellow}SCREEN = ${SCREEN_SESSION}${white}]"
            fi

            SESSION_STATUS+="\n${white}┣━"
        fi

        echo -e "${SESSION_STATUS}"
    }

    # Refresh cached IPs periodically
    function update_ip_cache() {
        PROMPT_LOCAL_IP=$(get_local_ip 2>/dev/null || echo "Unavailable")
        PROMPT_EXTERNAL_IP=$(get_external_ip 2>/dev/null || echo "Unavailable")
        LAST_IP_CHECK=$(date +%s)
    }

    # Function to determine if a network interface is configured as DHCP or Static
    function is_dhcp_static() {
        # Ensure the interface is provided
        local interface=$1
        if [[ -z "${interface}" ]]; then
            echo "Error: No interface specified." >&2
            return 1
        fi

        # Detect OS type
        local os_type
        os_type=$(get_os_type)

        # Handle Linux systems
        if [[ "${os_type}" == "Linux" ]]; then
            # Check if nmcli is available and NetworkManager is active
            if command -v nmcli &>/dev/null && systemctl is-active NetworkManager &>/dev/null; then
                local connection_profile
                connection_profile=$(nmcli -g GENERAL.CONNECTION device show "${interface}" 2>/dev/null)

                if [[ "${connection_profile}" != "--" && -n "${connection_profile}" ]]; then
                    local ip_method
                    ip_method=$(nmcli -g ipv4.method connection show "${connection_profile}" 2>/dev/null)

                    case "${ip_method}" in
                    auto)
                        echo "DHCP"
                        return 0
                        ;;
                    manual)
                        echo "Static"
                        return 0
                        ;;
                    esac
                fi
            fi

            # Check if systemd-networkd is active
            if systemctl is-active systemd-networkd &>/dev/null; then
                local config_file
                config_file=$(find /etc/netplan/ -name "*.yaml" -print -quit)

                if [[ -n "${config_file}" ]]; then
                    local config
                    config=$(grep -A3 "${interface}:" "${config_file}" 2>/dev/null)

                    if echo "${config}" | grep -q "dhcp4: true"; then
                        echo "DHCP"
                        return 0
                    elif echo "${config}" | grep -q "addresses:"; then
                        echo "Static"
                        return 0
                    fi
                fi
            fi

            # Fall back to /etc/network/interfaces
            if [[ -f /etc/network/interfaces ]]; then
                local config
                config=$(grep -A3 "iface ${interface}" /etc/network/interfaces 2>/dev/null)

                if echo "${config}" | grep -q "dhcp"; then
                    echo "DHCP"
                    return 0
                elif echo "${config}" | grep -q "static"; then
                    echo "Static"
                    return 0
                fi
            fi

            echo "Unknown (unable to determine DHCP or Static configuration)." >&2
            return 1

        # Handle macOS systems
        elif [[ "${os_type}" == "macOS" ]]; then
            # Check if the 'networksetup' command is available
            if ! command -v networksetup &>/dev/null; then
                echo "Error: 'networksetup' command is not available." >&2
                exit 1
            fi

            # Capture the list of hardware ports and devices
            resulting_list=$(networksetup -listallhardwareports | awk '
                /^Hardware Port:/ { port_name = substr($0, index($0, $3)) }
                /^Device:/ { device_name = $2; print device_name "," port_name }
            ')

            # Ensure the resulting list is not empty
            if [[ -z "${resulting_list}" ]]; then
                echo "Error: No hardware ports or devices found." >&2
                exit 1
            fi

            # Process each line in the list
            while IFS= read -r line; do
                local device="${line%%,*}"
                local port_name="${line#*,}"

                if [[ "${interface}" == "${device}" ]]; then
                    # Get network configuration for the matching port
                    local config
                    config=$(networksetup -getinfo "${port_name}" 2>/dev/null)

                    if [[ $? -ne 0 ]]; then
                        echo "Error: Failed to get network information for '${port_name}' (${device})." >&2
                        return 1
                    fi

                    if echo "${config}" | grep -q "DHCP Configuration"; then
                        echo "DHCP"
                        return 0
                    elif echo "${config}" | grep -q "Manually configured"; then
                        echo "Static"
                        return 0
                    else
                        echo "Unknown"
                        return 1
                    fi
                fi
            done <<<"${resulting_list}"

            echo "Unknown"
            return 1
        else
            echo "Unsupported OS: ${os_type}" >&2
            return 1
        fi
    }

    # Function to get local IP with caching, excluding certain interfaces
    function get_local_ip() {
        # Define interfaces to exclude
        local excluded_interfaces=("lo*" "docker*" "virbr*" "vnet*" "tun*" "tap*" "br-*" "ip6tnl*" "sit*")
        local interfaces=""
        local result=""
        local iface ip dhcp

        # Check for required commands
        if command -v ip &>/dev/null; then
            # Get network interfaces and IPs using 'ip'
            interfaces=$(ip -o addr show | awk '$3 == "inet" && $4 != "127.0.0.1/8" {print $2,$4}')
        elif command -v ifconfig &>/dev/null; then
            # Get network interfaces and IPs using 'ifconfig'
            interfaces=$(ifconfig | awk '/^[a-zA-Z0-9]+:/ { iface=$1; next } /inet / && $2 != "127.0.0.1" { print iface,$2 }' | sed 's/://')
        else
            echo "Error: Neither 'ip' nor 'ifconfig' command is available." >&2
            return 1
        fi

        # Check if any interfaces were found
        if [[ -z "${interfaces}" ]]; then
            return 1
        fi

        # Parse and filter interfaces
        while IFS= read -r line; do
            iface=$(echo "${line}" | awk '{print $1}')
            ip=$(echo "${line}" | awk '{print $2}' | cut -d'/' -f1)

            # Skip excluded interfaces using glob matching
            for pattern in "${excluded_interfaces[@]}"; do
                if [[ ${iface} == ${pattern} ]]; then
                    continue 2 # Skip to the next line in the parent loop
                fi
            done

            # Determine if the interface is using DHCP or static
            if command -v is_dhcp_static &>/dev/null; then
                dhcp=$(is_dhcp_static "${iface}")
            else
                dhcp="unknown" # Fallback if is_dhcp_static is not defined
            fi

            # Append result (color variables should be defined elsewhere in the script)
            result+="${light_blue}${iface}${yellow}(${dhcp})${white}:${blue}${ip}${white}, "
        done <<<"${interfaces}"

        # Remove trailing comma and space
        export PROMPT_LOCAL_IP="${result%, }"

        # Check if result is empty (e.g., all interfaces excluded)
        if [[ -z "${PROMPT_LOCAL_IP}" ]]; then
            return 1
        fi

        # Output the result
        echo "${PROMPT_LOCAL_IP}"
    }

    # Function to get external IP with caching
    function get_external_ip() {
        # Define a cache file location
        local cache_file="/tmp/external_ip.cache"
        local external_ip=""

        # Attempt to use the cached IP if the file exists and is recent
        if [[ -f "${cache_file}" && -n $(find "${cache_file}" -mmin -10) ]]; then
            external_ip=$(<"${cache_file}")
            # Validate the cached IP
            if [[ "${external_ip}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "${external_ip}"
                return 0
            else
                rm -f "${cache_file}" # Remove invalid cache
            fi
        fi

        # Fetch the external IP using curl or wget
        if command -v curl &>/dev/null; then
            external_ip=$(${PROXY} curl -4 -s --max-time 5 https://ifconfig.me/ip)
        elif command -v wget &>/dev/null; then
            external_ip=$(${PROXY} wget -4 -qO- --timeout=5 https://ifconfig.me/ip)
        else
            return 1
        fi

        # Validate the fetched IP
        if [[ -z "${external_ip}" || ! "${external_ip}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            return 1
        fi

        # Cache the valid IP
        echo "${external_ip}" >"${cache_file}"

        # Export and print the result
        export PROMPT_EXTERNAL_IP="${external_ip}"
        echo "${PROMPT_EXTERNAL_IP}"
        return 0
    }
fi
