#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : meta_module.sh
# DESCRIPTION : Shared utility functions for modules
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-26
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-26           | Adam Compton | Initial creation.
# =============================================================================

# Guard to prevent multiple sourcing
if [[ -z "${META_MODULE_SH_LOADED:-}" ]]; then
    declare -g META_MODULE_SH_LOADED=true

    # =============================================================================
    # FUNCTION: validate_envs
    # DESCRIPTION: Validates required environment variables are set and non-empty.
    # =============================================================================
    # Usage:
    # validate_envs VAR1 VAR2 ...
    # - VAR1, VAR2, ...: Names of environment variables to validate.
    # - Outputs an error message if any variable is unset or empty.
    # - Returns:
    #   - 0: All variables are valid.
    #   - 1: One or more variables are invalid.
    # =============================================================================
    function validate_envs() {
        local has_failed=0

        for var in "$@"; do
            check_env_var "${var}" || has_failed=1
        done

        return "${has_failed}"
    }

    # =============================================================================
    # FUNCTION: validate_input_output
    # DESCRIPTION: Validates files and directories for existence and permissions.
    # =============================================================================
    # Usage:
    # validate_input_output inputs outputs
    # - inputs: Array of file paths that must exist and be readable.
    # - outputs: Array of directory paths that must exist and be writable.
    # =============================================================================
    function validate_input_output() {
        local -n inputs=$1        # List of input files
        local -n outputs=$2       # List of output directories

        local has_failed=0

        # Validate input files
        for file in "${inputs[@]}"; do
            validate_file_exists "${file}" || has_failed=1
            check_file_readable "${file}" || has_failed=1
        done

        # Validate output directories
        for dir in "${outputs[@]}"; do
            check_dir_exists "${dir}" || has_failed=1
            check_dir_writable "${dir}" || has_failed=1
        done

        return "${has_failed}"
    }

    # =============================================================================
    # FUNCTION: validate_tools
    # DESCRIPTION: Validates that required tools are installed and executable.
    # =============================================================================
    # Usage:
    # validate_tools TOOL1 TOOL2 ...
    # - TOOL1, TOOL2, ...: Names of command-line tools to validate.
    # - Outputs an error message for each missing or non-executable tool.
    # - Returns:
    #   - 0: All tools are valid.
    #   - 1: One or more tools are missing or not executable.
    # =============================================================================
    function validate_tools() {
        local has_failed=0

        for tool in "$@"; do
            check_tool "${tool}" || has_failed=1
        done

        return "${has_failed}"
    }
fi
