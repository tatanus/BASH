#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : pentest_menu.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-16 16:51:35
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-16 16:51:35  | Adam Compton | Initial creation.
# =============================================================================

# Main function
function _Pentest_Menu() {

    # Define an associative array to hold script categories
    declare -A script_categories

    source "${SCRIPT_DIR}/pentest_menu/meta_module.sh"

    MODULES_DIR="${SCRIPT_DIR}/pentest_menu/modules"

    # Check if the modules directory exists
    if [[ ! -d "${MODULES_DIR}" ]]; then
        fail "Modules directory not found: ${MODULES_DIR}"
        return
    fi

    # Dynamically source all scripts in the modules directory
    for module in "${MODULES_DIR}"/*.sh; do
        if [[ -f "${module}" ]]; then
            # Source the script
            source "${module}"

            # Extract the tool's name
            tool_name=$(basename "${module}" .sh)

            # Check if script_categories is declared and populated by the script
            if [[ -n "${script_categories[${tool_name}]:-}" ]]; then
                pass "Sourced ${module} with categories: ${script_categories[${tool_name}]}"
            else
                warn "${module} did not populate script_categories for ${tool_name}"
            fi
        else
            fail "No matching scripts found in ${MODULES_DIR}"
        fi
    done
}

# Function to list scripts by category
function list_scripts_by_category() {
    local category="$1"
    echo "Scripts in category: ${category}"
    for script in "${!script_categories[@]}"; do
        if [[ " ${script_categories[${script}]} " == *" ${category} "* ]]; then
            echo "- ${script}"
        fi
    done
}
