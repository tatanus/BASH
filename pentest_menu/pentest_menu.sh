#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : pentest_menu.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-16 16:51:35
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-16 16:51:35  | Adam Compton | Initial creation.
# =============================================================================

# Guard to prevent multiple sourcing
if [[ -z "${PENTEST_MENU_SH_LOADED:-}" ]]; then
    declare -g PENTEST_MENU_SH_LOADED=true

    # Main function
    function _Pentest_Menu() {

        # Define an associative array to hold script categories
        declare -A script_categories

        source "${SCRIPT_DIR}/pentest_menu/meta_module.sh"
        MODULES_DIR="${SCRIPT_DIR}/pentest_menu/modules"

        # Check if the modules directory exists
        if [[ ! -d "${MODULES_DIR}" ]]; then
            fail "Modules directory not found: ${MODULES_DIR}"
            return
        fi

        # Dynamically source all scripts in the modules directory
        for module in "${MODULES_DIR}"/run_*.sh; do
            if [[ -f "${module}" ]]; then
                # Source the script
                source "${module}"

                # Extract the tool's name
                tool_name=$(basename "${module}" .sh)

                # Check if script_categories is declared and populated by the script
                if [[ -n "${script_categories[${tool_name}]:-}" ]]; then
                    pass "Sourced ${module} with categories: ${script_categories[${tool_name}]}"
                else
                    warn "${module} did not populate script_categories for ${tool_name}"
                fi
            else
                fail "No matching scripts found in ${MODULES_DIR}"
            fi
        done

        # Extract unique categories
        local unique_categories=("ALL")
        local category
        for tool_categories in "${script_categories[@]}"; do
            for category in ${tool_categories}; do
                # Add unique categories to the array
                if [[ ! " ${unique_categories[@]} " =~ " ${category} " ]]; then
                    unique_categories+=("${category}")
                fi
            done
        done

        # Display the menu
        _Display_Menu "CHOOSE A PENTEST CATEGORY" "_Process_PentestMenu_Menu" false "${unique_categories[@]}"
    }

    function _Process_PentestMenu_Menu() {
        local choice="$1"

        # Validate input
        if [[ -z "${choice}" ]]; then
            warn "Usage: _Process_PentestMenu_Menu 'option'"
            return "${_FAIL}"
        fi

        if [[ "${choice}" == "ALL" ]]; then
            # List all modules regardless of category
            local all_modules=("${!script_categories[@]}")
            _Display_Menu "${choice} Tasks" "_Process_PentestMenu_Category_Menu" true "${all_modules[@]}"
        else
            # List modules specific to the selected category
            local category_modules=()
            for script in "${!script_categories[@]}"; do
                if [[ " ${script_categories[${script}]} " == *" ${choice} "* ]]; then
                    category_modules+=("${script}")
                fi
            done

            _Display_Menu "${choice} Tasks" "_Process_PentestMenu_Category_Menu" true "${category_modules[@]}"
        fi
    }

    function _Process_PentestMenu_Category_Menu() {
        local choice="$1"

        # Validate input
        if [[ -z "${choice}" ]]; then
            warn "Usage: _Process_PentestMenu_Category_Menu 'option'"
            return 1
        fi

        info "Executing function: ${choice}"
        if ! _Exec_Function "${choice}"; then
            fail "Failed to execute function: ${choice}"
            return 1
        fi
    }

    # Function to list scripts by category
    function list_scripts_by_category() {
        local category="$1"
        echo "Scripts in category: ${category}"
        for script in "${!script_categories[@]}"; do
            if [[ " ${script_categories[${script}]} " == *" ${category} "* ]]; then
                echo "- ${script}"
            fi
        done
    }
fi
