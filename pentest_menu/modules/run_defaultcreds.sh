#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_defaultcreds.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-09 13:49:51
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-09 13:49:51  | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_defaultcreds"]="external internal web"

# Define an approximate ordering
script_order["run_defaultcreds"]=30

# Main function
function run_defaultcreds() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local _env_vars
    _env_vars=("PORTSCAN_DIR" "ENGAGEMENT_DIR" "CREDS_DIR" "TOOLS_DIR" "LOOT_DIR")
    validate_envs "${_env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local _input_files _output_dirs
    _input_files=("${PORTSCAN_DIR}/SPOONMAP/all_live_hosts.txt")
    _output_dirs=("${CREDS_DIR}" "${LOOT_DIR}/FILES")
    validate_input_output _input_files _output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "nmap"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    # Define file paths
    EXCLUDES_FILE="${ENGAGEMENT_DIR}/excludes.txt"
    LIVE_HOSTS_FILE="${PORTSCAN_DIR}/SPOONMAP/all_live_hosts.txt"
    OUTPUT_FILE="${CREDS_DIR}/FILES/default_creds"

    # Set up Nmap arguments
    NMAP_ARGS="http-default-accounts.fingerprintfile=${TOOLS_DIR}/nndefaccts/http-default-accounts-fingerprints-nndefaccts.lua"
    TARGET_PORTS="80,443,4243,7000,8000,8001,8008,8080,8443,9000"

    # Run Nmap with or without exclusion file
    if [[ -f "${EXCLUDES_FILE}" ]]; then
        info "Running default credential scan with excludes from ${EXCLUDES_FILE}..."
        nmap -v -v --open --excludefile "${EXCLUDES_FILE}" --script http-default-accounts --script-args "${NMAP_ARGS}" -p "${TARGET_PORTS}" -iL "${LIVE_HOSTS_FILE}" -oA "${OUTPUT_FILE}"
    else
        info "Running default credential scan without excludes..."
        nmap -v -v --open --script http-default-accounts --script-args "${NMAP_ARGS}" -p "${TARGET_PORTS}" -iL "${LIVE_HOSTS_FILE}" -oA "${OUTPUT_FILE}"
    fi

    if [[ $? -ne 0 ]]; then
        fail "Default credential scan failed."
        return "${_FAIL}"
    fi

    pass "Default credential scan completed. Results saved to ${OUTPUT_FILE}."

    # Parse out any default credentials

    # Check if Python version exists
    if ! command -v "python${PYTHON_VERSION}" &> /dev/null; then
        fail "python${PYTHON_VERSION} not found. Ensure it is installed and available in PATH." >&2
        return "${_FAIL}"
    fi

    # Check if the Python script exists
    PYTHON_SCRIPT="${TOOLS_DIR}/SCRIPTS/extractDefaultCreds.py"
    if [[ ! -f "${PYTHON_SCRIPT}" ]]; then
        fail "Python script not found at ${PYTHON_SCRIPT}" >&2
        return "${_FAIL}"
    fi

    # Run the Python script
    "python${PYTHON_VERSION}" "${PYTHON_SCRIPT}" "${OUTPUT_FILE}.xml" > "${LOOT_DIR}/FILES/DefaultCreds.txt"

    # Check if the output file was successfully created
    if [[ $? -eq 0 ]]; then
        pass "Successfully extracted default credentials to ${LOOT_DIR}/FILES/DefaultCreds.txt"
    else
        fail "Failed to extract default credentials" >&2
        return "${_FAIL}"
    fi
}
