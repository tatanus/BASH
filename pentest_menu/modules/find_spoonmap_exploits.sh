#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : find_spoonmap_exploits.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-09 13:49:51
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-09 13:49:51  | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["find_spoonmap_exploits"]="external internal web"

# Main function
function find_spoonmap_exploits() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local _env_vars
    _env_vars=("TOOLS_DIR" "PORTSCAN_DIR")
    validate_envs "${_env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local _input_files _output_dirs
    _input_files=()
    _output_dirs=("${PORTSCAN_DIR}")
    validate_input_output _input_files _output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "grep" "cut" "sort" "sed" "touch"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    info "Checking for known exploits based on live host port files..."

    # Define exploits, associated ports, and references
    declare -A exploit_data
    exploit_data["Java RMI"]="1090 1098 1099 4444 11099 47001 47002 10999|https://www.rapid7.com/db/modules/exploit/multi/misc/java_rmi_server https://medium.com/@afinepl/java-rmi-for-pentesters-structure-recon-and-communication-non-jmx-registries-a10d5c996a79 https://medium.com/@afinepl/java-rmi-for-pentesters-part-two-reconnaissance-attack-against-non-jmx-registries-187a6561314d"
    exploit_data["WebLogic"]="7000 7001 7002 7003 7004 8000 8001 8002 8003 9000 9001 9002 9003 9503 7070 7071|https://www.exploit-db.com/search?q=weblogic"
    exploit_data["JDWP"]="45000 45001|https://www.rapid7.com/db/modules/exploit/multi/misc/java_jdwp_debugger https://github.com/IOActive/jdwp-shellifier"
    exploit_data["JMX"]="8686 9012 50500|https://www.rapid7.com/db/modules/exploit/multi/misc/java_jmx_server"
    exploit_data["GlassFish"]="4848|https://www.rapid7.com/db/modules/auxiliary/scanner/http/glassfish_traversal"
    exploit_data["JBoss"]="11111 4444 4445|https://www.rapid7.com/db/modules/auxiliary/scanner/http/jboss_vulnscan https://github.com/joaomatosf/jexboss"
    exploit_data["Cisco Smart Install"]="4786|https://www.rapid7.com/db/modules/auxiliary/scanner/misc/cisco_smart_install https://github.com/Sab0tag3d/SIET"
    exploit_data["HP Data Protector"]="5555 5556|https://www.rapid7.com/db/modules/exploit/multi/misc/hp_data_protector_exec_integutil https://www.rapid7.com/db/modules/exploit/windows/misc/hp_dataprotector_cmd_exec"
    exploit_data["SAP"]="3300|https://github.com/chipik/SAP_GW_RCE_exploit"
    exploit_data["Dameware"]="6129|https://www.tenable.com/security/research/tra-2019-43 https://github.com/tenable/poc/blob/master/Solarwinds/Dameware/dwrcs_dwDrvInst_rce.py"
    exploit_data["Redis"]="6379|https://www.rapid7.com/db/modules/exploit/linux/redis/redis_replication_cmd_exec"
    exploit_data["Cisco Unified Communications Manager"]="6970|https://github.com/trustedsec/SeeYouCM-Thief http://[CUCM_IP]:6970/ConfigFileCacheList.txt"
    exploit_data["Adobe ColdFusion BlazeDS"]="8080|https://www.tenable.com/plugins/nessus/99731"

    live_hosts_dir="${PORTSCAN_DIR}/spoonmap/live_hosts"

    # Ensure the live hosts directory exists
    if [[ ! -d "${live_hosts_dir}" ]]; then
        fail "Directory ${live_hosts_dir} does not exist. Cannot proceed with exploit checks."
        return "${_FAIL}"
    fi

    # Ensure live hosts directory is not empty
    if [[ -z "$(ls -A "${live_hosts_dir}" 2>/dev/null)"  ]]; then
        fail "No port files found in ${live_hosts_dir}. Exiting."
        return "${_FAIL}"
    fi

    # Generate a report for found exploits
    report_file="${PORTSCAN_DIR}/spoonmap_exploit_report_$(date +%Y%m%d%H%M%S).txt"
    if ! touch "${report_file}" 2>/dev/null; then
        fail "Unable to write to ${report_file}. Check permissions."
        return "${_FAIL}"
    fi
    echo "Exploit Report - Generated on $(date)" >"${report_file}"
    echo "--------------------------------------" >>"${report_file}"

    # Check for each exploit based on ports
    for exploit in "${!exploit_data[@]}"; do
        # Extract ports and references
        IFS='|' read -r ports refs <<<"${exploit_data[${exploit}]}"

        # Validate that ports and references exist
        if [[ -z "${ports}" ]]; then
            warn "No ports defined for ${exploit}. Skipping."
            continue
        fi

        if [[ -z "${refs}" ]]; then
            warn "No references defined for ${exploit}. Skipping."
            continue
        fi

        found_ports=()
        for port in ${ports}; do
            port_file="${live_hosts_dir}/port${port}.txt"

            # Check if the port file exists and is readable
            if [[ -f "${port_file}" && -s "${port_file}" && -r "${port_file}" ]]; then
                found_ports+=("${port}")
            elif [[ -f "${port_file}" && ! -r "${port_file}" ]]; then
                warn "Port file ${port_file} is not readable. Skipping."
            fi
        done

        # Log results if any ports are found for the exploit
        if [[ ${#found_ports[@]} -gt 0 ]]; then
            info "${exploit} found on the following ports: ${found_ports[*]}"
            {
                echo "${exploit} found on ports: ${found_ports[*]}"
                echo "References: ${refs}"
                echo ""
            } >>"${report_file}"
        else
            debug "No ports found for ${exploit}."
        fi
    done

    pass "Exploit checks completed. Report saved to ${report_file}"
}
