#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_msf_scripts.sh
# DESCRIPTION : Discover and execute Metasploit module scripts from the
#               "${TOOLS_DIR}/SCRIPTS/MSF/MODULES/" directory.
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-09 13:49:51
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-09 13:49:51  | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_msf_scripts"]="internal"

# Define an approximate ordering
script_order["run_msf_scripts"]=30

# =============================================================================
# Name: _Process_PentestMSFMenu_Menu
# Short Description: Execute the chosen MSF module script as-is.
#
# Long Description:
#   Validates that the selected module file exists under
#   "${TOOLS_DIR}/SCRIPTS/MSF/MODULES/" and runs it directly with msfconsole.
#   Reports success or failure, then pauses for user acknowledgment.
#
# Parameters:
#   $1 - Name of the .rc script to run (basename only)
#
# Requirements:
#   - TOOLS_DIR must be defined.
#   - msfconsole must be in PATH.
#
# Usage:
#   _Process_PentestMSFMenu_Menu "example.rc"
#
# Returns:
#   - 0 on success; non-zero on error.
# =============================================================================
function _Process_PentestMSFMenu_Menu() {
    local script_name="$1"
    local script_path

    if [[ -z "${script_name}" ]]; then
        warn "No script selected."
        return 1
    fi

    script_path="${TOOLS_DIR}/SCRIPTS/MSF/MODULES/${script_name}"
    if [[ ! -r "${script_path}" ]]; then
        warn "Module not found or unreadable: ${script_path}"
        return 1
    fi

    info "Running Metasploit module: ${script_name}..."
    if ! command -v msfconsole &> /dev/null; then
        warn "msfconsole is not installed or not in PATH."
        return 1
    fi

    msfconsole -q -r "${script_path}"
    if [[ $? -ne 0 ]]; then
        warn "msfconsole returned an error for ${script_name}."
    else
        pass "Module ${script_name} executed successfully."
    fi

    _Pause
}

# =============================================================================
# Name: run_msf_scripts
# Short Description: Build menu and dispatch MSF module scripts.
#
# Long Description:
#   Validates environment, discovers all ".rc" files under
#   "${TOOLS_DIR}/SCRIPTS/MSF/MODULES/", presents a menu of script names,
#   and invokes the processor for the user's selection.
#
# Parameters:
#   None
#
# Requirements:
#   - OUTPUT_DIR, PORTSCAN_DIR, TOOLS_DIR must be defined.
#   - validate_envs, validate_input_output, validate_tools,
#     check_dir_readable, _Display_Menu must be available.
#
# Usage:
#   run_msf_scripts
#
# Returns:
#   - 0 on success; non-zero on error.
# =============================================================================
function run_msf_scripts() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local _env_vars
    _env_vars=("OUTPUT_DIR" "TOOLS_DIR")
    validate_envs "${_env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local _input_files
    local _output_dirs
    _input_files=()
    _output_dirs=("${OUTPUT_DIR}/TEE")
    validate_input_output _input_files _output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "msfconsole"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    # Check if the MSF directory exists
    local module_dir="${TOOLS_DIR}/SCRIPTS/MSF/MODULES"
    check_dir_readable "${module_dir}" || {
        warn "Metasploit modules directory missing or unreadable: ${module_dir}"
        return ${_FAIL}
    }
    info "Preparing to run Metasploit scripts from ${TOOLS_DIR}/SCRIPTS/MSF/MODULES/..."

    # Generate the list of MSF scripts dynamically
    local msf_scripts=()
    while IFS= read -r script_file; do
        script_name="$(basename "${script_file}")"
        msf_scripts+=("${script_name}")
    done < <(find "${module_dir}" -type f -name "*.rc" 2> /dev/null | sort)

    if [[ ${#msf_scripts[@]} -eq 0 ]]; then
        warn "No MSF module scripts found in ${module_dir}."
        return ${_FAIL}
    fi

    info "Found ${#msf_scripts[@]} module(s)."

    info "Metasploit scripts found: ${#msf_scripts[@]}"

    _Display_Menu "CHOOSE A MSF SCRIPT" "_Process_PentestMSFMenu_Menu" false "${msf_scripts[@]}"

    pass "Metasploit script execution completed."
}
