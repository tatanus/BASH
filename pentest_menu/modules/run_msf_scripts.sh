#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_msf_scripts.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-09 13:49:51
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-09 13:49:51  | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_msf_scripts"]="internal"

# Define an approximate ordering
script_order["run_msf_scripts"]=30

# Run MSF script
function _Process_PentestMSFMenu_Menu() {
    local choice="$1"

    # Validate input
    if [[ -z "${choice}" ]]; then
        warn "Usage: _Process_Start_Menu 'option'"
        return "${_FAIL}"
    fi

    local port=$(echo "${script}" | cut -d':' -f2)
    local script_name=$(echo "${script}" | cut -d':' -f1)

    local original_script="${TOOLS_DIR}/SCRIPTS/MSF/${script_name}"

    info "Executing script ${script_name} on port ${port}..."

    # Determine the target file
    if [[ "${port}" != "-1" ]]; then
        targets_file="${PORTSCAN_DIR}/NMAP/${port}.txt"
        if [[ ! -s "${targets_file}" ]]; then
            warn "No targets found for port ${port}. Skipping ${script_name}."
            return
        fi
    fi

    # Create a temporary rc file with replaced paths
    local temp_script="/tmp/${script_name}.tmp"
    sed -e "s|/root/DATA/NMAP|${PORTSCAN_DIR}/NMAP|g" \
        -e "s|/root/DATA/TEE|${OUTPUT_DIR}/MSF|g" \
        "${original_script}" > "${temp_script}"

    # Execute the temporary Metasploit script
    msfconsole -q -r "${temp_script}"
    if [[ $? -ne 0 ]]; then
        warn "Execution failed for script ${script_name}."
    else
        pass "Script ${script_name} completed successfully."
    fi

    # Clean up the temporary file
    rm -f "${temp_script}"
}

# Main function
function run_msf_scripts() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local _env_vars
    _env_vars=("OUTPUT_DIR" "RECON_DIR" "TOOLS_DIR")
    validate_envs "${_env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local _input_files
    local _output_dirs
    _input_files=()
    _output_dirs=("${OUTPUT_DIR}/MSF")
    validate_input_output _input_files _output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "msfconsole" "grep" "sed" "cut"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    # Check if the MSF directory exists
    check_dir_readable "${TOOLS_DIR}/SCRIPTS/MSF"

    info "Preparing to run Metasploit scripts from ${TOOLS_DIR}/SCRIPTS/MSF..."

    # Generate the list of MSF scripts dynamically
    msf_scripts=()
    while IFS= read -r script_file; do
        # Extract the port if available, or default to -1
        port=$(grep -Eo "set RHOSTS file:.*\.txt" "${script_file}" | sed -E "s|.*file:.*NMAP/([0-9]+)\.txt|\1|")
        [[ -z "${port}" ]] && port="-1"

        # Get script name and check output status
        script_name=$(basename "${script_file}")
        output_file="${OUTPUT_DIR}/MSF/${script_name%.rc}.tee"
        output_status="✖"
        [[ -s "${output_file}" ]] && output_status="✔"

        msf_scripts+=("${script_name}:${port}:${output_status}")

    done < <(find "${TOOLS_DIR}/SCRIPTS/MSF" -name "*.rc" | sort)

    info "Metasploit scripts found: ${#msf_scripts[@]}"

    _Display_Menu "CHOOSE A MSF SCRIPT" "_Process_PentestMSFMenu_Menu" false "${msf_scripts[@]}"

    pass "Metasploit script execution completed."
}
