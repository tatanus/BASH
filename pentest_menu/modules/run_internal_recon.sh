#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_internal_recon.sh
# DESCRIPTION :
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-09 13:49:51
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-09 13:49:51  | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_internal_recon"]="internal"

# Main function
function run_internal_recon() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local env_vars=("NETWORK_IFACE" "DATA_DIR")
    validate_envs "${env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local input_files=("${DATA_DIR}/targets.txt")
    local output_dirs=("${DATA_DIR}/TASKS/RECON")
    validate_input_output input_files output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "nmap" " grep" "awk" "nslookup" "sed"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    TARGETS_FILE="${DATA_DIR}/targets.txt"
    RECON_DIR="${DATA_DIR}/TASKS/RECON"

    if [[ -z "${NETWORK_IFACE}" ]]; then
        info "NETWORK_IFACE is not set. Selecting an interface..."
        # Call a helper script or function to fetch interfaces
        interfaces=$(ip -o link show | awk -F': ' '{print $2}')
        NETWORK_IFACE=$(echo "${interfaces}" | fzf --prompt="Select a network interface: ")

        if [[ -n "${NETWORK_IFACE}" ]]; then
            info "Selected interface: ${NETWORK_IFACE}"
            export NETWORK_IFACE
            update_pentest_env "NETWORK_IFACE" "${NETWORK_IFACE}"
        else
            fail "No interface selected. Exiting."
            return
        fi
    fi

    # Run the Nmap DHCP discovery script
    info "Running Nmap DHCP discovery on interface ${NETWORK_IFACE}..."
    NMAP_OUTPUT=$(nmap -e "${NETWORK_IFACE}" --script broadcast-dhcp-discover \
        --script-args broadcast-listener.timeout=300 | tee -a "${RECON_DIR}/broadcast-dhcp-discover.txt")

    # Extract domain and DNS information
    AD_DOMAIN=$(echo "${NMAP_OUTPUT}" | grep "Domain Name:" | awk '{print $NF}' | tr -d '\\\x00')
    DNS_SERVER=$(echo "${NMAP_OUTPUT}" | grep "Domain Name Server:" | awk -F ', ' '{print $1}' | awk '{print $NF}')

    if [[ -z "${AD_DOMAIN}" || -z "${DNS_SERVER}" ]]; then
        fail "Failed to extract domain or DNS server information from Nmap output."
        return
    fi

    # Export and log the extracted variables
    export AD_DOMAIN DNS_SERVER
    update_pentest_env "AD_DOMAIN" "${AD_DOMAIN}"
    update_pentest_env "DNS_SERVER" "${DNS_SERVER}"
    info "AD_DOMAIN: ${AD_DOMAIN}"
    info "DNS_SERVER: ${DNS_SERVER}"

    # Perform nslookup to retrieve LDAP SRV records
    info "Performing nslookup for LDAP SRV records..."
    NSLOOKUP_OUTPUT=$(nslookup -type=srv _ldap._tcp.dc._msdcs."${AD_DOMAIN}" "${DNS_SERVER}" | tee -a "${RECON_DIR}/nslookup_ldap.txt")

    if [[ $? -ne 0 ]]; then
        fail "Nslookup failed for domain ${AD_DOMAIN}."
        return
    fi

    # Extract FQDNs and save to file
    FQDN_FILE="${RECON_DIR}/DC_FQDN.txt"
    echo "${NSLOOKUP_OUTPUT}" | grep "_ldap._tcp.dc._msdcs.${AD_DOMAIN}" | awk '{print $NF}' | sed 's/\.$//' > "${FQDN_FILE}"

    if [[ ! -s "${FQDN_FILE}" ]]; then
        fail "No FQDNs found for domain ${AD_DOMAIN}."
        return
    fi

    info "FQDNs saved to ${FQDN_FILE}."

    # Ensure input file exists
    if [[ ! -f "${FQDN_FILE}" ]]; then
        echo "Error: FQDN file '${FQDN_FILE}' not found."
        return
    fi

    # Map FQDNs to IP addresses
    IP_FILE="${RECON_DIR}/DC_IP.txt"
    true > "${IP_FILE}"

    while read -r fqdn; do
        # Skip empty lines
        [[ -z "${fqdn}" ]] && continue

        # Perform DNS lookup and extract the last IPv4 address
        ip=$(nslookup "${fqdn}" 2> /dev/null | awk '/^Address: / {ip=$2} END {print ip}')

        if [[ -n "${ip}" ]]; then
            echo "${ip}" >> "${IP_FILE}"
        else
            echo "Warning: Failed to resolve ${fqdn}" >&2
        fi
    done < "${FQDN_FILE}"

    info "Mapped FQDNs to IPs and saved to ${IP_FILE}."

    # Success message
    pass "Recon completed successfully!"
}
