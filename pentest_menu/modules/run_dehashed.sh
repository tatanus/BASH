#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_dehashed.sh
# DESCRIPTION : Script to query the Dehashed API for target information
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-26
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-26           | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_dehashed"]="recon external"

# Main function
function run_dehashed() {
    # =============================================================================
    # Step 1: Validate environment variables
    # =============================================================================
    local env_vars
    _env_vars=("DEHASHED_API_KEY" "DOMAINS_FILE" "OUTPUT_DIR")
    validate_envs "${env_vars[@]}" || return 1

    # =============================================================================
    # Step 2: Validate input files and output directories
    # =============================================================================
    local _input_files _output_dirs
    _input_files=("${DOMAINS_FILE}")
    _output_dirs=("${OUTPUT_DIR}")
    validate_input_output input_files output_dirs || return 1

    # =============================================================================
    # Step 3: Validate any needed tools exist
    # =============================================================================
    validate_tools "curl"

    # =============================================================================
    # Step 4: Main logic
    # =============================================================================
    targets=${DOMAINS_FILE}
    info "Starting Dehashed queries for targets listed in ${targets}..."

    # Query Dehashed API for each target
    while IFS= read -r target; do
        if [[ -z "${target}" ]]; then
            warn "Empty target entry found. Skipping..."
            continue
        fi

        info "Querying Dehashed for ${target}..."

        # Generate output file path
        local filename
        filename=$(generate_filename "dehashed")
        local OUTPUT_FILE="${OUTPUT_DIR}/raw/${filename}"

        info "Output will be saved to ${OUTPUT_FILE}."

        local response
        response=$(${PROXY} curl -s -u "${DEHASHED_API_KEY}:" "https://api.dehashed.com/search?query=${target}")

        if [[ $? -ne 0 ]]; then
            warning "Failed to query Dehashed for ${target}."
        else
            echo "${response}" >> "${OUTPUT_FILE}"
            pass "Results for ${target} saved to ${OUTPUT_FILE}."
        fi
    done < "${targets}"

    pass "Dehashed queries completed."
}
