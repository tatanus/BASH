#!/usr/bin/env bash
set -uo pipefail

# =============================================================================
# NAME        : run_dehashed.sh
# DESCRIPTION : Script to query the Dehashed API for target information
# AUTHOR      : Adam Compton
# DATE CREATED: 2024-12-26
# =============================================================================
# EDIT HISTORY:
# DATE                 | EDITED BY    | DESCRIPTION OF CHANGE
# ---------------------|--------------|----------------------------------------
# 2024-12-26           | Adam Compton | Initial creation.
# =============================================================================

# Define script categories
script_categories["run_dehashed"]="recon external credentials"

# Main function
function run_dehashed() {
    # Validate required environment variables
    validate_env_vars "DEHASHED_API_KEY" "DOMAINS_FILE" "OUTPUT_DIR"

    # Validate targets file and output directory
    targets=${DOMAINS_FILE}
    validate_targets_and_output "${targets}" "${OUTPUT_DIR}"

    info "Starting Dehashed queries for targets listed in ${targets}..."

    # Query Dehashed API for each target
    while IFS= read -r target; do
        if [[ -z "${target}" ]]; then
            warn "Empty target entry found. Skipping..."
            continue
        fi

        info "Querying Dehashed for ${target}..."

        # Generate output file path
        local filename
        filename=$(generate_filename "dehashed")
        local OUTPUT_FILE="${OUTPUT_DIR}/raw/${filename}"

        info "Output will be saved to ${OUTPUT_FILE}."

        local response
        response=$(${PROXY} curl -s -u "${DEHASHED_API_KEY}:" "https://api.dehashed.com/search?query=${target}")

        if [[ $? -ne 0 ]]; then
            warning "Failed to query Dehashed for ${target}."
        else
            echo "${response}" >> "${OUTPUT_FILE}"
            success "Results for ${target} saved to ${OUTPUT_FILE}."
        fi
    done < "${targets}"

    success "Dehashed queries completed."
}
